% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate.r
\name{generate}
\alias{generate}
\alias{generate,MFCLFrq,MFCLprojControl,ANY-method}
\alias{generate,MFCLPar,MFCLPar,MFCLFrq-method}
\alias{generate,MFCLPar,MFCLFrq,ANY-method}
\alias{generate,MFCLPar,MFCLPar,MFCLTagProj-method}
\alias{generate,MFCLTag,MFCLTag,missing-method}
\alias{generate,MFCLFrq,MFCLPseudo,MFCLTag-method}
\alias{generate,MFCLIni,MFCLMSEControl,MFCLTag-method}
\title{'generate()' method for FLR4MFCL}
\usage{
generate(x, y, z, ...)

\S4method{generate}{MFCLFrq,MFCLprojControl,ANY}(x, y, z, ...)

\S4method{generate}{MFCLPar,MFCLPar,MFCLFrq}(x, y, z, ...)

\S4method{generate}{MFCLPar,MFCLFrq,ANY}(x, y, z, ...)

\S4method{generate}{MFCLPar,MFCLPar,MFCLTagProj}(x, y, z, ...)

\S4method{generate}{MFCLTag,MFCLTag,missing}(x, y, z, ...)

\S4method{generate}{MFCLFrq,MFCLPseudo,MFCLTag}(x, y, z, eff_crp_mult, ...)

\S4method{generate}{MFCLIni,MFCLMSEControl,MFCLTag}(x, y, z, z2 = "missing", ...)
}
\arguments{
\item{x}{An \linkS4class{MFCLFrq} or \linkS4class{MFCLPar} object that will be expanded.}

\item{y}{If \code{x} is an \linkS4class{MFCLFrq} then \code{y} is an \linkS4class{MFCLprojControl}. If \code{x} is \linkS4class{MFCLPar}, \code{y} is either an \linkS4class{MFCLPar} or \linkS4class{MFCLFrq}.}

\item{z}{If \code{x} and \code{y} are \linkS4class{MFCLPar}s then \code{z} is \linkS4class{MFCLFrq}. Alternatively if \code{x} and \code{y} are \linkS4class{MFCLPar} and \linkS4class{MFCLFrq} respectively then \code{z} is \linkS4class{MFCLTagProj}. Otherwise it is ignored.}

\item{...}{Additional arguments (currently unused).}
}
\value{
An object of the same type as the \code{x} argument, expanded and hopefully useable for running projections.
}
\description{
'generate()' can generate a range of different MFCL objects including 'par' and 'freq' files.
The exact behaviour depends on the type of objects passed to 'generate()'.
It is used to (hopefully) improve the workflow when manipulating MFCL objects in R, particularly when preparing objects for 
running projections, but also when generating new stock assessment input files from pseudo data.
}
\details{
There are currently five 'generate()' methods:
\itemize{
  \item Generate an expanded \linkS4class{MFCLFrq} object from an existing \linkS4class{MFCLFrq} object and a \linkS4class{MFCLprojControl} object. 
  \item Generate an expanded \linkS4class{MFCLPar} object from an existing \linkS4class{MFCLPar} object and a \linkS4class{MFCLFrq} object. This is typically used for taking a expanding an existing par and using a 00 par (generated using the MFCL executable).
  \item Generate an expanded \linkS4class{MFCLPar} object from an existing \linkS4class{MFCLFrq} object. This can be a useful way of avoiding making a 00 par with MFCL executable, reading it in, and blowing it up. It can be used for standard projection analyses that do not include additional tag data. Tests for this method can be found in the inst/mfcl_tests folder of the package source.
  \item Generate an expanded \linkS4class{MFCLPar} object from an existing \linkS4class{MFCLFrq} object and a \linkS4class{MFCLTagProj} object. This method is method can be used to set up par objects that include additional tag data.
  \item Generate new stock assessment input files \linkS4class{MFCLFrq}, \linkS4class{MFCLTag}, etc. objects from an \linkS4class{MFCLPseudo} object and a \linkS4class{MFCLTagProj} object.
}
}
\examples{
\dontrun{
# Expanding an MFCLFrq, e.g. that was used from in an assessment
frq <- read.MFCLFrq(initial_frq)
projCtrl <- MFCLprojControl(nyears=nyears, nsims=1, avyrs=avyrs, fprojyr=first_proj_yr, controls=proj_controls)
projfrq  <- generate(frq, projCtrl)
# Expanding an MFCLPar, e.g. that was generated as part of an assessment.
# After making a 00 par with the MFCL executable.
par <- read.MFCLPar(initial_par, first.yr=first_yr)
zero.par <- read.MFCLPar("00.par" first.yr=first_yr)
# Generate the new par file which has the right size for everything and has all the old information
projpar <- generate(par, zero.par, projfrq)
# Alternatively, expanding an MFCLPar without using the 00 par
projpar <- generate(par, projfrq)
}
}
\seealso{
\code{\link{MFCLprojContrl}} \code{\link{MFCLFrq}} \code{\link{MFCLPar}}
}
